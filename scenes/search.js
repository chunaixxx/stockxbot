import '../mongodb.js'
import Good from '../models/Good.js'

import vk from '../commonVK.js'
import { StepScene } from '@vk-io/scenes'

import baseSendMessage from '../baseSendMessage.js'

import keyboard from '../markup/keyboard.js'

import answerMarkup from '../markup/answerMarkup.js'
import { baseMarkup } from '../markup/baseMarkup.js'
import menuMarkup from '../markup/menuMarkup.js'
import methodSearch from '../markup/methodSearch.js'
import cityMarkup from '../markup/cityMarkup.js'
import previousMarkup from '../markup/previousMarkup.js'

import getUserName from '../utils/getUserName.js'
import getGoodFromStockx from '../utils/getGoodFromStockx.js'
import generateImage from '../utils/generateImage.js'
import convertURL from '../utils/convertURL.js'

const searchScene = [
	new StepScene('search', [
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
				return ctx.send({
					message:
						'‚ùó –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–æ–±–∏—Ä–∞—Ç–µ—Å—å –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä',
					keyboard: keyboard([...methodSearch, ...menuMarkup]),
				})
			
			ctx.scene.state.isSearchName = false
			ctx.scene.state.isSearchLink = false

			if (ctx.text == '–ú–µ–Ω—é') {
				baseSendMessage(ctx)
				return ctx.scene.leave()
			}

			if (ctx.text == '–ù–∞–∑–≤–∞–Ω–∏–µ') {
				ctx.scene.state.isSearchName = true
				ctx.scene.step.go(1)
			}

			if (ctx.text == '–°—Å—ã–ª–∫–∞') {
				ctx.scene.state.isSearchLink = true
				ctx.scene.step.go(2)
			}
		},
		// –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
				return ctx.send({
					message:
						'‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –º—ã –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É',
					keyboard: keyboard(previousMarkup),
				})

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(0)

			if (ctx.text.length < 3)
				return ctx.send({
					message:
						'‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî 3 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å',
					keyboard: keyboard(previousMarkup),
				})

			ctx.scene.state.query = ctx.text
			ctx.scene.state.searchedGoods = await Good.find({'goodName': {'$regex': '.*' + ctx.text +'.*', $options: 'i'}}).exec()

			ctx.scene.step.go(3)
		},
		// –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
			return ctx.send({
				message: '‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å —Å–∞–π—Ç–∞ stockx.com, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n\n–®–∞–±–ª–æ–Ω: stockx.com/*',
				keyboard: keyboard(previousMarkup),
			})

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(0)

			const link = convertURL(ctx.text)
			const goodFromStockx = await getGoodFromStockx(link)
			if (!goodFromStockx)
				return ctx.send({
					message: `‚ùó –°—Å—ã–ª–∫–∞ –Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ —Ç–æ–≤–∞—Ä —Å stockx.com, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–®–∞–±–ª–æ–Ω: stockx.com/*`,
					keyboard: keyboard(menuMarkup)
				})
	
			ctx.scene.state.goodName = goodFromStockx.name
			ctx.scene.state.searchedGoods = await Good.find({ link }).exec()

			ctx.scene.step.go(3)
		},
		// –í—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
		async ctx => {
			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(0)

			const searchedGoods = ctx.scene.state.searchedGoods

			if (ctx.scene.state.isSearchLink) {
				const goodName = ctx.scene.state.goodName
				if (searchedGoods.length) {
					let sendString = `‚ùó –ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${goodName}" –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n`
					searchedGoods.forEach((item, index) => {
						const { sellerName, sellerId, city, size, price} = item
		
						if (size)
							sendString += `üìå ${ sellerName }, ${city} (vk.com/id${sellerId})\n–†–∞–∑–º–µ—Ä: ${size}, –¶–µ–Ω–∞: ${price}—Ä—É–±.\n\n`
						else
							sendString += `üìå ${ sellerName }, ${city} (vk.com/id${sellerId})\n–¶–µ–Ω–∞: ${price}—Ä—É–±.\n\n`
					})
	
					ctx.send({
						message: sendString,
						keyboard: keyboard(previousMarkup)
					})
				} else {
					ctx.send({
						message: `‚ùó –¢–æ–≤–∞—Ä "${goodName}" –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç –Ω–∞ –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–µ, –ø–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:`,
					})
					return ctx.scene.step.go(0)
				}
			}

			if (ctx.scene.state.isSearchName) {
				if (searchedGoods.length) {
					let sendString = `‚ùó –ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${ctx.text}" –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n`
		
					searchedGoods.forEach((item, index) => {
						const { sellerName, sellerId, city, goodName, size, price} = item
		
						if (size)
							sendString += `üìå ${ sellerName }, ${city} (vk.com/id${sellerId})\n${goodName} | \n–†–∞–∑–º–µ—Ä: ${size}, –¶–µ–Ω–∞: ${price}—Ä—É–±.\n\n`
						else
							sendString += `üìå ${ sellerName }, ${city} (vk.com/id${sellerId})\n–¶–µ–Ω–∞: ${price}—Ä—É–±.\n\n`
					})
	
					ctx.send({
						message: sendString,
						keyboard: keyboard(previousMarkup)
					})
				} else {
					ctx.send({
						message: `‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ${ctx.scene.state.query} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–µ.`, 
					})
					return ctx.scene.step.go(0)
				}
			}
		},
		async ctx => {
			ctx.send('Good')
		}
	])	
]

export default searchScene
