import '../mongodb.js'
import Good from '../models/Good.js'
import User from '../models/User.js'
import BotConfig from '../models/BotConfig.js'

import vk from '../commonVK.js'
import { StepScene } from '@vk-io/scenes'

import baseSendMessage from '../baseSendMessage.js'

import keyboard from '../markup/keyboard.js'

import answerMarkup from '../markup/answerMarkup.js'
import { baseMarkup } from '../markup/baseMarkup.js'
import menuMarkup from '../markup/menuMarkup.js'
import methodSearch from '../markup/methodSearch.js'
import skipMarkup from '../markup/skipMarkup.js'
import previousMarkup from '../markup/previousMarkup.js'

import getGoodFromStockx from '../utils/getGoodFromStockx.js'
import convertURL from '../utils/convertURL.js'
import sortGoodsByPrice from '../utils/sortGoodsByPrice.js'
import { incrementSearch, resetSearchInfo } from '../utils/updateSearchInfo.js'
import convertDate from '../utils/convertDate.js'

const searchScene = [
	new StepScene('search', [
		async ctx => {
			if (ctx.text == '–ú–µ–Ω—é') {
				baseSendMessage(ctx)
				return ctx.scene.leave()
			}

            if (ctx.text == '–ü–æ–∏—Å–∫ —Å–∫–∏–¥–∫–∏') {
                return ctx.send({
                    message: `–û—á–µ–Ω—å —Ä–∞–¥—ã —á—Ç–æ —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏ –Ω–∞—à–∏ —Å–∫–∏–¥–∫–∏! –ú—ã –¥–µ–ª–∞–µ–º —Å–∫–∏–¥–∫—É –≤ —Ç–∞–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∫–∞–∫:\n\nLamoda -25%\nLeform 35-40%\nAsos –¥–æ 40%\nFarfetch –¥–æ 20%\nStreet Beat –¥–æ 40%\nBrandshop 15%\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—à–∏ https://vk.com/eileonov`,
                    keyboard: keyboard([...methodSearch, ...menuMarkup])
                })
            }

			try {
				const user = await User.findOne({ userId: ctx.senderId })

				const countSearch = user.searchInfo.count
				const lastSearch = user.searchInfo.lastSearch
				const maxCountSearch = (await BotConfig.findOne()).maxSearch
				const extendedAccess = user.extendedAccess
				
				// const msMounth = 1000 * 60 * 60 * 24 * 30
				const botConfig = await BotConfig.findOne()
				const cooldownSearch = botConfig.cooldownSearch

				if (countSearch >= maxCountSearch && extendedAccess == false ) {
					if (Date.now() - lastSearch.getTime() >= cooldownSearch) {
						await resetSearchInfo(ctx.senderId)
					} else {
						const leftTime = convertDate(+cooldownSearch + +lastSearch.getTime())

						ctx.send({
							message: `‚ùó –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤ (${ countSearch }/${ maxCountSearch }). –°–ª–µ–¥—É—é—â–∏–µ ${ maxCountSearch } –ø–æ–∏—Å–∫–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã ${ leftTime }. –û—Ñ–æ—Ä–º–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–æ–≤`,
							keyboard: keyboard(menuMarkup)	
						})
						return ctx.scene.leave()
					}
				}
			} catch (e) {
				console.log(e)
				ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
				return ctx.scene.leave()
			}

			if (ctx.scene.step.firstTime || !ctx.text) {
				return ctx.send({
					message:
						'‚ùó –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–æ–±–∏—Ä–∞—Ç–µ—Å—å –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä',
					keyboard: keyboard([...methodSearch, ...menuMarkup]),
				})
			}

			ctx.scene.state.query = null
			ctx.scene.state.link = null
			ctx.scene.state.range = [0, Infinity]
			ctx.scene.state.sizeRange = []


			if (ctx.text == '–ù–∞–∑–≤–∞–Ω–∏–µ') {
				ctx.scene.step.go(1)
			}

			if (ctx.text == '–°—Å—ã–ª–∫–∞') {
				ctx.scene.step.go(2)
			}
		},
		// –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
				return ctx.send({
					message:
						'‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –º—ã –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É',
					keyboard: keyboard(previousMarkup),
				})

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(0)

			if (ctx.text.length < 3)
				return ctx.send({
					message:
						'‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî 3 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å',
					keyboard: keyboard(previousMarkup),
				})

			ctx.scene.state.query = ctx.text

			ctx.scene.step.go(3)
		},
		// –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ
		async ctx => {
			if (ctx.scene.step.firstTime || (!ctx.text && !ctx?.attachments[0]?.url))
			return ctx.send({
				message: '‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å —Å–∞–π—Ç–∞ stockx.com, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n\n–®–∞–±–ª–æ–Ω: stockx.com/*',
				keyboard: keyboard(previousMarkup),
			})

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(0)

			const link = convertURL(ctx.text || ctx?.attachments[0]?.url)
			
			const goodFromStockx = await getGoodFromStockx(link)
			if (!goodFromStockx)
				return ctx.send({
					message: `‚ùó –°—Å—ã–ª–∫–∞ –Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ —Ç–æ–≤–∞—Ä —Å stockx.com, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–®–∞–±–ª–æ–Ω: stockx.com/*`,
					keyboard: keyboard(previousMarkup)
				})
	
			ctx.scene.state.goodName = goodFromStockx.name
			ctx.scene.state.link = link

			ctx.scene.step.go(3)
		},
		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
			async ctx => {
				if (ctx.scene.step.firstTime || !ctx.text)
					return ctx.send({
						message:
							'‚ùóÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–∞–∑–º–µ—Ä—É? –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ stockx.com. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ FAQ.\n\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 7 7Y 7W 11C 4K (—ç—Ç–æ –≤—Å–µ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–Ω—ã–µ —Å–µ—Ç–∫–∏)',
						keyboard: keyboard(skipMarkup),
					})
	
				if (ctx.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
					return ctx.scene.step.next()
	
				const range = ctx.text.toUpperCase().split(' ')
				ctx.scene.state.sizeRange = range
	
				return ctx.scene.step.next()
			},
	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
				return ctx.send({
					message:
						'‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ü–µ–Ω–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω.\n\n–ü—Ä–∏–º–µ—Ä: 10000-200000',
					keyboard: keyboard(skipMarkup),
				})

			if (ctx.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
				return ctx.scene.step.next()

			const patternNumber = /^\d+$/
			const rangeArr = ctx.text.split('-')

			if (rangeArr.length == 2 && patternNumber.test(rangeArr[0]) && patternNumber.test(rangeArr[1])) {
				ctx.scene.state.range = [+rangeArr[0], +rangeArr[1]]
				return ctx.scene.step.next()
			} else {
				return ctx.send('–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ \n\n‚ùå 10.000—Ä—É–±.-200.000—Ä—É–±.\n‚úîÔ∏è 10000-200000')
			}
		},

		// –í—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
		async ctx => {
			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(0)

			if (ctx.text == '–ú–µ–Ω—é') {
				baseSendMessage(ctx)
				return ctx.scene.leave()
			}

			if (ctx.scene.state.link) {
				const link = ctx.scene.state.link

				const minPrice = ctx.scene.state.range[0]
				const maxPrice = ctx.scene.state.range[1]

				const sizeRange = ctx.scene.state.sizeRange

				try {
					if (sizeRange.length) {
						ctx.scene.state.searchedGoods = await Good.find({ 
							link,
							'price': { $gte : minPrice, $lte : maxPrice},
							'size': { $in: sizeRange }
						}).exec()
					} else {
						ctx.scene.state.searchedGoods = await Good.find({ 
							link,
							'price': { $gte : minPrice, $lte : maxPrice},
						}).exec()
					}

					ctx.scene.state.searchedGoods.sort(sortGoodsByPrice());
					
					const searchedGoods = ctx.scene.state.searchedGoods
					const goodName = ctx.scene.state.goodName
					


					if (searchedGoods.length) {
                        try {
                            ctx.send(`‚ùó –ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${goodName}" –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:`)

                            let sendString = ''
                            let counter = 0;
        
                            const pages = []

                            searchedGoods.forEach((item, index) => {
                                const { sellerName, sellerId, city, size, price, _id} = item;
                
                                if (size)
                                    sendString += `üìå ${ sellerName }, ${city} (vk.com/id${sellerId})\n–†–∞–∑–º–µ—Ä: ${size}, –¶–µ–Ω–∞: ${price}—Ä—É–±.\n\n`
                                else
                                    sendString += `üìå ${ sellerName }, ${city} (vk.com/id${sellerId})\n–¶–µ–Ω–∞: ${price}—Ä—É–±.\n\n`

                                counter += 1

                                if (counter >= 20 || searchedGoods.length - 1 == index) {
                                    pages.push(sendString)
                                    sendString = ''
                                    counter = 0
                                }
                            })

                            searchedGoods.forEach(async item => {
                                const { _id} = item;
                                await Good.findOneAndUpdate({ _id }, { $inc: { 'views': 1 } })
                            })

        
                            for (const page of pages)
                                await ctx.send(page)

                            await incrementSearch(ctx.senderId)
                        } catch (e) {
                            console.log(e)
                            ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                            return ctx.scene.leave()
                        }
					} else {
						ctx.send({
							message: `‚ùó –¢–æ–≤–∞—Ä "${goodName}" –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç –Ω–∞ –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä.`,
						})
					}

					await BotConfig.updateOne(
						{
							$inc: { 'stats.countSearch': 1 }
						}
					)

					return ctx.scene.step.go(0)
				} catch (e) {
					console.log(e)
					ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
					return ctx.scene.leave()
				}
			}

			if (ctx.scene.state.query) {
				try {
					const minPrice = ctx.scene.state.range[0]
					const maxPrice = ctx.scene.state.range[1]

					const sizeRange = ctx.scene.state.sizeRange

					if (sizeRange.length) {
						ctx.scene.state.searchedGoods = await Good.find({
							'goodName': {'$regex': '.*' + ctx.scene.state.query +'.*', $options: 'i'},
							'price': { $gte :  minPrice, $lte :  maxPrice},
							'size': { $in: sizeRange }
						}).exec()
					} else {
						ctx.scene.state.searchedGoods = await Good.find({
							'goodName': {'$regex': '.*' + ctx.scene.state.query +'.*', $options: 'i'},
							'price': { $gte :  minPrice, $lte :  maxPrice},
						}).exec()					
					}

					ctx.scene.state.searchedGoods.sort(sortGoodsByPrice());
					
					const searchedGoods = ctx.scene.state.searchedGoods
					
					if (searchedGoods.length) {
                        try {
                            ctx.send(`‚ùó –ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${ ctx.scene.state.query }" –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n`)
                
                            let sendString = ''
                            let counter = 0;
        
                            const pages = []

                            searchedGoods.forEach((item, index) => {
                                const { sellerName, sellerId, city, goodName, size, price, _id} = item;
                
                                if (size)
                                    sendString += `üìå ${ sellerName }, ${ city } (vk.com/id${ sellerId })\n${ goodName } | \n–†–∞–∑–º–µ—Ä: ${ size }, –¶–µ–Ω–∞: ${ price }—Ä—É–±.\n\n`
                                else
                                    sendString += `üìå ${ sellerName }, ${ city } (vk.com/id${ sellerId })\n${ goodName } | –¶–µ–Ω–∞: ${ price }—Ä—É–±.\n\n`

                                counter += 1

                                if (counter >= 20 || searchedGoods.length - 1 == index) {
                                    pages.push(sendString)
                                    sendString = ''
                                    counter = 0
                                }
                            })

                            searchedGoods.forEach(async item => {
                                const { _id} = item;
                                await Good.findOneAndUpdate({ _id }, { $inc: { 'views': 1 } })
                            })

                            for (const page of pages)
                                await ctx.send(page)

                            await incrementSearch(ctx.senderId)
                        } catch (e) {
                            console.log(e)
                            ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                            return ctx.scene.leave()
                        }
					} else {
						ctx.send({
							message: `‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ${ctx.scene.state.query} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä.`, 
						})
					}

					await BotConfig.updateOne(
						{
							$inc: { 'stats.countSearch': 1 }
						}
					)

					return ctx.scene.step.go(0)
				} catch (e) {
					console.log(e)
					ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
					return ctx.scene.leave()
				}
			}
		},
	])	
]

export default searchScene
