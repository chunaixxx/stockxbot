import config from 'config'

import User from '../models/User'
import Good from '../models/Good'
import MailingUser from '../models/MailingUser'
import BannedUser from '../models/BannedUser'
import BotConfig from '../models/BotConfig'

import vk from '../commonVK'
import { StepScene } from '@vk-io/scenes'

import baseSendMessage from '../baseSendMessage'

import keyboard from '../markup/keyboard'

import { baseMarkup } from '../markup/baseMarkup'
import { editGoodMarkup, editGoodNotSizeMarkup, editGoodsMarkup, updateGoodsMarkup, editAllGoodsMarkup, subArchiveMarkup, showOtherProfileMarkup, deleteDescGoodMarkup, unSubArchiveMarkup, subSearchGoodMarkup } from '../markup/profileMarkup'
import { menuMarkup, previousMarkup, answerMarkup, nextMarkup } from '../markup/generalMarkup'

import getGoodFromStockx from '../utils/getGoodFromStockx'
import generateImage from '../utils/generateImage'
import { resetSearchInfo } from '../utils/updateSearchInfo'
import formatSubcribesOnGoods from '../utils/formatMessages/formatSubcribesOnGoods'

import getUserDossierMessage from '../utils/adminScene/getUserDossierMessage'
import getUserGoodsInPages from '../utils/adminScene/getUserGoodsInPages'
import { findExtendedUser } from '../controllers/manageUser'

const profileScene = [
	new StepScene('profile', [
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Å–∫—Ä—ã—Ç—ã —Ç–æ–≤–∞—Ä—ã
        async ctx => {
            if (ctx.scene.step.firstTime || !ctx.text) {
                try {
                    const goods = await Good.find({ sellerId: ctx.senderId })
    
                    const someGoodIsHide = goods.some(good => good.isHide)
    
                    if (someGoodIsHide) {
                        return ctx.send({
                            message: 'üîí –¢–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å',
                            keyboard: keyboard(...nextMarkup) 
                        })
                    } else {
                        ctx.scene.step.next()
                    }                    
                } catch (e) {
					console.log(e)
					ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
					return ctx.scene.leave()
				}
            }

            if (ctx.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
                ctx.scene.step.next()
        },
		// –ü–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text || ctx.scene.state.isDelete) {
				try {
                    // –û–±—ä–µ–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
					const user = ctx.state.user

                    // –¢–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const goods = await Good.find({ sellerId: ctx.senderId })
                    ctx.scene.state.goods = goods
                    
                    // –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const leftSell = user?.freeSell
					const leftSearch = user?.freeSearch

					let sendString = ''
					if (user.extendedAccess)
						sendString += `‚ùó –ü—Ä–æ—Ñ–∏–ª—å | PRO-–≤–µ—Ä—Å–∏—è üöÄ\n\n–î–æ—Å—Ç—É–ø–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ‚àû\n–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∏—Å–∫–æ–≤: ‚àû\n`
					else
						sendString += `‚ùó –ü—Ä–æ—Ñ–∏–ª—å\n\n–î–æ—Å—Ç—É–ø–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${ leftSell }\n–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∏—Å–∫–æ–≤: ${ leftSearch }\n\n‚ùó –î–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ‚Äî –ø—Ä–∏–æ–±—Ä–µ—Ç–∏ PRO-–≤–µ—Ä—Å–∏—é!\n\n`


					if (goods.length === 0) {
						return ctx.send({
							message: sendString + '\n\n‚ùó –£ —Ç–µ–±—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ‚Äî –ü—Ä–æ–¥–∞—Ç—å',
							keyboard: user.extendedAccess ? keyboard([...subSearchGoodMarkup, ...menuMarkup]) : keyboard(menuMarkup),
						})
					} else {
                        ctx.send(sendString)

                        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                        sendString = ''
                        let counter = 0;
                        const pages = []
                        goods.forEach((item, index) => {
                            const { goodName, size, price, city, views, hasDelivery, hasFitting, isHide, desc } = item
    
                            sendString += `[${index + 1}] `
    
                            if (isHide)
                                sendString += 'üîí –ù–µ–∞–∫—Ç–∏–≤–Ω–æ üîí '

                            let strViews = ''

                            if (user.extendedAccess)
                                strViews = ` | ${views} –ø–æ–∫–∞–∑–æ–≤`
    
                            if (size)
                                sendString += `${goodName}\n${size} | ${price}‚ÇΩ | ${city} | –î–æ—Å—Ç–∞–≤–∫–∞: ${hasDelivery} | –ü—Ä–∏–º–µ—Ä–∫–∞: ${ hasFitting }${ strViews }`
                            else
                                sendString += `${goodName}\n${price}‚ÇΩ | ${city} | –î–æ—Å—Ç–∞–≤–∫–∞: ${hasDelivery} | ${views} –ø–æ–∫–∞–∑–æ–≤`
    
                            if (desc)
                                sendString += `\nüìù ${desc}`

                            sendString += '\n\n'

                            counter += 1
    
                            if (counter >= 20 || goods.length - 1 == index) {
                                pages.push(sendString)
                                sendString = ''
                                counter = 0
                            }
                        })
    
                        for (const page of pages)
                            ctx.send(page)
                        //
    
                        ctx.scene.state.isDelete = false
                        ctx.scene.state.selectedGood = null
                        ctx.scene.state.newGood = null
    
                        const mailingArchiveUser = await MailingUser.findOne({ userId: ctx.senderId, type: 'archive' })
                        ctx.scene.state.mailingArchiveUser = mailingArchiveUser
    
                        const subscribeMarkup = mailingArchiveUser ? unSubArchiveMarkup : subArchiveMarkup
    
                        return ctx.send({
                            message: '‚ùó –¢–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä (–æ–Ω —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—á–∞–ª–µ), —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n‚ùó –¢—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä "–ü—Ä–∏–º–µ—Ä–∫–∞" –∏ "–î–æ—Å—Ç–∞–≤–∫–∞" —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"',
                            keyboard: user.extendedAccess ? 
                                    keyboard([...editGoodsMarkup, ...updateGoodsMarkup, ...subscribeMarkup, ...subSearchGoodMarkup, ...showOtherProfileMarkup, ...menuMarkup]) 
                                : 
                                    keyboard([...updateGoodsMarkup, ...subscribeMarkup, ...menuMarkup]),
                        }) 
                    }
				} catch (e) {
					console.log(e)
					ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
					return ctx.scene.leave()
				}
			}

            switch (ctx.text) {
                case '–ú–µ–Ω—é':
                    baseSendMessage(ctx)
                    return ctx.scene.leave()
                case '–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã':
                    return ctx.scene.step.go(13)
            }

            if (ctx.text == '–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' && ctx.state.user.extendedAccess)
                return ctx.scene.step.go(9)

            if (ctx.text == '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫' && ctx.state.user.extendedAccess)
                return ctx.scene.step.go(14)

            if (ctx.text == '–ß—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å' && ctx.state.user.extendedAccess)
                return ctx.scene.step.go(15)

            // –†–∞—Å—Å—ã–ª–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
            try {
                const mailingArchiveUser = ctx.scene.state.mailingArchiveUser

                if (ctx.text == '–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏' && !mailingArchiveUser) {
                    const mailingUser = new MailingUser({
                        userId: ctx.senderId,
                        type: 'archive',
                        groupId: config.get('groupID')
                    })

                    await mailingUser.save()

                    ctx.send('‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å –¥–æ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏!')
                    return ctx.scene.step.go(1)
                }
    
                if (ctx.text == '–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏' && mailingArchiveUser) {
                    await MailingUser.deleteOne({ userId: ctx.senderId, type: 'archive'})

                    ctx.send('‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ë—É–¥—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ, –Ω–µ –∑–∞–±—ã–≤–∞–π –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã!')
                    return ctx.scene.step.go(1)
                }                
            } catch (e) {
                console.log(e)
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }

            if (ctx.scene.state.goods.length) {
                if (ctx.scene.state.goods[+ctx.text - 1])
                    ctx.scene.step.next()
                else
                    ctx.send({
                        message: '‚ùó –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                        keyboard: keyboard(menuMarkup),
                    })
            }
		},
		// –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text) {
				let goods = null
				let selectedGood = null

				if (!ctx.scene.state.newGood) {
					goods = ctx.scene.state.goods
					selectedGood = goods[+ctx.text - 1]
					ctx.scene.state.selectedGood = selectedGood
					ctx.scene.state.newGood = JSON.parse(JSON.stringify(selectedGood));
				}

				let sendString = '‚ùó –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n'

				const { goodName, size, price, city, hasDelivery, hasFitting, desc } = ctx.scene.state.selectedGood

				if (ctx.scene.state.selectedGood.size)
					sendString += `${goodName}\n${size} | ${price}—Ä—É–±. | ${city} | –î–æ—Å—Ç–∞–≤–∫–∞: ${hasDelivery} | –ü—Ä–∏–º–µ—Ä–∫–∞: ${hasFitting}`
				else 
                    sendString += `${goodName}\n${price}—Ä—É–±. | ${city} | –î–æ—Å—Ç–∞–≤–∫–∞: ${hasDelivery}`

                if (desc)
                    sendString += `\n${ desc }`

				const markup = ctx.scene.state.selectedGood.size ? editGoodMarkup : editGoodNotSizeMarkup

				return ctx.send({
					message: sendString,
					keyboard: keyboard(markup),
				})
			}

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(1)

			if (ctx.text == '–£–¥–∞–ª–∏—Ç—å') {
				try {
					await Good.deleteOne({ _id: ctx.scene.state.selectedGood._id })
					await BotConfig.updateOne({ $inc: { 'stats.countDelete': 1 } })

					// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –±—ã–ª –æ–¥–∏–Ω
					if (ctx.scene.state.goods.length == 1) {
						ctx.send({
							message: '‚ùó –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –£ —Ç–µ–±—è –Ω–µ—Ç –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ ',
							keyboard: keyboard(baseMarkup)
						})
						return ctx.scene.leave()
					} else {
						ctx.send('‚ùó –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
						ctx.scene.state.isDelete = true
						return ctx.scene.step.go(1)
					}
				} catch (e) {
					console.log(e)
					ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
					return ctx.scene.leave()
				}
			}

            if (ctx.text == '–û–ø–∏—Å–∞–Ω–∏–µ') {
                if (ctx.state.user.extendedAccess) {
				    return ctx.scene.step.go(3)
                } else {
                    ctx.send('‚ùó –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ PRO-–≤–µ—Ä—Å–∏–∏')
                    return ctx.scene.step.go(2)
                }
            }

			if (ctx.text == '–†–∞–∑–º–µ—Ä' && ctx.scene.state.selectedGood.size)
				return ctx.scene.step.go(4)

            if (ctx.text == '–¶–µ–Ω–∞')
				return ctx.scene.step.go(5)
            
            if (ctx.text == '–î–æ—Å—Ç–∞–≤–∫–∞')
				return ctx.scene.step.go(6)

            if (ctx.text == '–ü—Ä–∏–º–µ—Ä–∫–∞' && ctx.scene.state.selectedGood.size)
				return ctx.scene.step.go(7)
		},
        // –û–ø–∏—Å–∞–Ω–∏–µ
        async ctx => {
            try {
                if (ctx.scene.step.firstTime || !ctx.text)
                    return ctx.send({
                        message: '‚ùó –£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏ ‚Äî –£–¥–∞–ª–∏—Ç—å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞',
                        keyboard: keyboard([...deleteDescGoodMarkup, ...previousMarkup])
                    })

                if (ctx.text == '–ù–∞–∑–∞–¥')
                    return ctx.scene.step.go(2)

                if (ctx.text == '–£–¥–∞–ª–∏—Ç—å') {
                    const { selectedGood } = ctx.scene.state
                
                    await Good.updateOne(
                        { _id: selectedGood._id },
                        { desc: null }
                    )
                } else {
                    if (ctx.text.length > 25)
                        return ctx.send({
                            message: '‚ùó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                            keyboard: keyboard(previousMarkup)
                        })

                    if (ctx.text.length < 3)
                        return ctx.send({
                            message: '‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                            keyboard: keyboard(previousMarkup)
                        })

                    const { selectedGood } = ctx.scene.state
                    
                    await Good.updateOne(
                        { _id: selectedGood._id },
                        { desc: ctx.text }
                    )
                }
                    
                ctx.send('‚ùó –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞')
                return ctx.scene.step.go(1)
            } catch (c) {
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }
        },
		// –†–∞–∑–º–µ—Ä
		async ctx => {
			if (!ctx.scene.state.selectedGood.size)
				return ctx.scene.step.next()

			if (ctx.scene.step.firstTime || !ctx.text) {
				try {
					const selectedGood = ctx.scene.state.selectedGood
					const goodFromStockx = await getGoodFromStockx(selectedGood.link)

					ctx.scene.state.selectedGoodFromStocx = goodFromStockx

					if (selectedGood.size)
						return ctx.send({
							message: `‚ùó –£–∫–∞–∂–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n\n${ goodFromStockx.allSizes.join(' ') }`,
							keyboard: keyboard(previousMarkup),
						})
					
                    return ctx.scene.step.next()
				} catch (e) {
					console.log(e)
					ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
					return ctx.scene.leave()
				}
			}

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(2)

			const selectedGoodFromStocx = ctx.scene.state.selectedGoodFromStocx

            if (/us|,/i.test(ctx.text))
                return ctx.send({
                    message: `‚ùó –†–∞–∑–º–µ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ US. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ –æ–Ω —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π, –∞ –Ω–µ –∑–∞–ø—è—Ç–æ–π. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –∏ –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n\n${ selectedGoodFromStocx.allSizes.join(' ') }`,
                    keyboard: keyboard(previousMarkup)
                })

			if (ctx.scene.state.selectedGood.size == ctx.text.toUpperCase())
				return ctx.send({
					message: `‚ùó –¢—ã —É–∫–∞–∑–∞–ª —Ä–∞–∑–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –∏ —Ç–∞–∫ —É–∫–∞–∑–∞–Ω –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n\n${ selectedGoodFromStocx.allSizes.join(' ') }`,
					keyboard: keyboard(previousMarkup),
				})
				
			if (!selectedGoodFromStocx.allSizes.includes(ctx.text.toUpperCase()))
				return ctx.send({
					message: `‚ùó –í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–∞–ø–∏—à–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n\n${ selectedGoodFromStocx.allSizes.join(' ') }`,
					keyboard: keyboard(previousMarkup),
				})

            ctx.scene.state.newGood.size = ctx.text.toUpperCase()
            ctx.scene.step.go(8)
		},
		// –¶–µ–Ω–∞
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
				return ctx.send({
					message: '‚ùó –£–∫–∞–∂–∏ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö',
					keyboard: keyboard(previousMarkup),
				})

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(2)

			if (+ctx.scene.state.selectedGood.price == +ctx.text)
				return ctx.send({
					message: '‚ùó –¢—ã —É–∫–∞–∑–∞–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–∞—è –∏ —Ç–∞–∫ —É–∫–∞–∑–∞–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é',
					keyboard: keyboard(previousMarkup),
				})

			const patternNumber = /^\d+$/
			if (patternNumber.test(ctx.text) == false)
				return ctx.send('‚ùó –£–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n‚ùå 10.000—Ä—É–±.\n‚úÖ 10000')

			if (+ctx.text > 10000000)
				return ctx.send('‚ùó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ 10000000—Ä—É–±.')

			if (+ctx.text < 1)
				return ctx.send('‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ 1—Ä—É–±.')

			ctx.scene.state.newGood.price = ctx.text
			ctx.scene.step.go(8)
		},
        // –î–æ—Å—Ç–∞–≤–∫–∞
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
				return ctx.send({
					message: '‚ùó –£–∫–∞–∂–∏, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞',
					keyboard: keyboard([...answerMarkup, ...previousMarkup]),
				})

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(2)

            const hasDelivery = ctx.scene.state.selectedGood.hasDelivery

			if ((hasDelivery == '‚ùå' && ctx.text == '–ù–µ—Ç') || (hasDelivery == '‚úÖ' && ctx.text == '–î–∞'))
				return ctx.send({
					message: '‚ùó –¢—ã —É–∫–∞–∑–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π –∏ —Ç–∞–∫ –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥\n\n‚ùó –£–∫–∞–∂–∏—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞',
					keyboard: keyboard([...answerMarkup, ...previousMarkup]),
				})

            if (ctx.text == '–î–∞')
                ctx.scene.state.newGood.hasDelivery = '‚úÖ'
            else if (ctx.text == '–ù–µ—Ç')
                ctx.scene.state.newGood.hasDelivery = '‚ùå'
            else 
                return

            ctx.scene.step.go(8)
		},
        // –ü—Ä–∏–º–µ—Ä–∫–∞
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
				return ctx.send({
					message: '‚ùó –£–∫–∞–∂–∏, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø—Ä–∏–º–µ—Ä–∫–∞',
					keyboard: keyboard([...answerMarkup, ...previousMarkup]),
				})

			if (ctx.text == '–ù–∞–∑–∞–¥')
				return ctx.scene.step.go(2)

            const hasFitting = ctx.scene.state.selectedGood.hasFitting

            if ((hasFitting == '‚ùå' && ctx.text == '–ù–µ—Ç') || (hasFitting == '‚úÖ' && ctx.text == '–î–∞'))
				return ctx.send({
					message: '‚ùó –¢—ã —É–∫–∞–∑–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π –∏ —Ç–∞–∫ –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥\n\n‚ùó –£–∫–∞–∂–∏—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø—Ä–∏–º–µ—Ä–∫–∞',
					keyboard: keyboard([...answerMarkup, ...previousMarkup]),
				})

            if (ctx.text == '–î–∞')
                ctx.scene.state.newGood.hasFitting = '‚úÖ'
            else if (ctx.text == '–ù–µ—Ç')
                ctx.scene.state.newGood.hasFitting = '‚ùå'
            else 
                return

            ctx.scene.step.go(8)
		},
		// –£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
		async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text) {
				try {
                    const { selectedGood, newGood } = ctx.scene.state

                    let { imgUrl, filename } = selectedGood
                    let attachment = null

                    try {
                        await generateImage(imgUrl, filename)

                        attachment = await vk.upload.messagePhoto({
                            peer_id: ctx.peerId,
                            source: { value: `./images/${filename}.jpg` }
                        })                        
                    } catch (e) {
                        console.log(e)
                    }

					let strOldItem = ''
					let strNewItem = ''

                    if (selectedGood.size) {
                        strOldItem = `‚ùó –°—Ç–∞—Ä–æ–µ:\n–¶–µ–Ω–∞: ${selectedGood.price}—Ä—É–±.\n–†–∞–∑–º–µ—Ä: ${selectedGood.size}\n–ì–æ—Ä–æ–¥: ${selectedGood.city}\n–ü—Ä–∏–º–µ—Ä–∫–∞: ${selectedGood.hasFitting}\n–î–æ—Å—Ç–∞–≤–∫–∞: ${selectedGood.hasDelivery}\n\n`
                        strNewItem = `‚ùó –ù–æ–≤–æ–µ:\n–¶–µ–Ω–∞: ${newGood.price}—Ä—É–±.\n–†–∞–∑–º–µ—Ä: ${newGood.size}\n–ì–æ—Ä–æ–¥: ${newGood.city}\n–ü—Ä–∏–º–µ—Ä–∫–∞: ${newGood.hasFitting}\n–î–æ—Å—Ç–∞–≤–∫–∞: ${newGood.hasDelivery}`
                    } else {
                        strOldItem = `‚ùó –°—Ç–∞—Ä–æ–µ:\n–¶–µ–Ω–∞: ${selectedGood.price}—Ä—É–±.\n–ì–æ—Ä–æ–¥: ${selectedGood.city}\n–î–æ—Å—Ç–∞–≤–∫–∞: ${selectedGood.hasDelivery}\n\n`
                        strNewItem = `‚ùó –ù–æ–≤–æ–µ:\n–¶–µ–Ω–∞: ${newGood.price}—Ä—É–±.\n–ì–æ—Ä–æ–¥: ${newGood.city}\n–î–æ—Å—Ç–∞–≤–∫–∞: ${newGood.hasDelivery}`
                    }

					return ctx.send({
						message: `‚ùó –ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ä–æ–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?\n\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${selectedGood.goodName}\n\n${strOldItem}\n${strNewItem}`,
						attachment, keyboard: keyboard(answerMarkup),
					})
				} catch (e) {
					console.log(e)
					ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
					ctx.scene.leave()
				}
			}

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try {
                switch (ctx.text) {
                    case '–î–∞':
                        const newGood = ctx.scene.state.newGood
                        await Good.findOneAndUpdate({'_id': newGood._id }, newGood);
                        ctx.send('‚ùó –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
                        return ctx.scene.step.go(1)
                    case '–ù–µ—Ç':
                        ctx.send('‚ùó –í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –∫ –ø–∞–Ω–µ–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
                        return ctx.scene.step.go(2)
                }
            } catch (e) {
                console.log(e)
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }
		},
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        async ctx => {
            if (ctx.scene.step.firstTime || !ctx.text)
                return ctx.send({ 
                    message: '‚ùó –¢—ã –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –í–°–ï–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π.',
                    keyboard: keyboard([...editAllGoodsMarkup, ...previousMarkup])
                })

            switch (ctx.text) {
                case '–ù–∞–∑–∞–¥':
                    return ctx.scene.step.go(1)
                case '–î–æ—Å—Ç–∞–≤–∫–∞':
                    return ctx.scene.step.go(10)
                case '–ü—Ä–∏–º–µ—Ä–∫–∞':
                    return ctx.scene.step.go(11)
                case '–¶–µ–Ω–∞':
                    return ctx.scene.step.go(12)
            }
        },
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        async ctx => {
			if (ctx.scene.step.firstTime || !ctx.text)
				return ctx.send({
					message: '‚ùó –£–∫–∞–∂–∏, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤',
					keyboard: keyboard([...answerMarkup, ...previousMarkup]),
				})

            try {
                switch (ctx.text) {
                    case '–ù–∞–∑–∞–¥':
                        return ctx.scene.step.go(9)
                    case '–î–∞':
                        await Good.updateMany({ 'sellerId': ctx.peerId }, { hasDelivery: '‚úÖ' })
                        ctx.send('‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.')
                        break;
                    case '–ù–µ—Ç':
                        await Good.updateMany({ 'sellerId': ctx.peerId }, { hasDelivery: '‚ùå' })
                        ctx.send('‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤')
                        break;
                }

                return ctx.scene.step.go(1)
            } catch (e) {
                console.log(e)
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }
        },
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        async ctx => {
            if (ctx.scene.step.firstTime || !ctx.text)
                return ctx.send({
                    message: '‚ùó –£–∫–∞–∂–∏, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø—Ä–∏–º–µ—Ä–∫–∞ –¥–ª—è –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤',
                    keyboard: keyboard([...answerMarkup, ...previousMarkup]),
                })

            try {
                switch (ctx.text) {
                    case '–ù–∞–∑–∞–¥':
                        return ctx.scene.step.go(9)
                    case '–î–∞':
                        await Good.updateMany(
                            { 'sellerId': ctx.peerId, 'hasFitting': { "$in": ['‚úÖ', '‚ùå'] } }, 
                            { hasFitting: '‚úÖ' }
                        )
                        ctx.send('‚úÖ –ü—Ä–∏–º–µ—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.')
                        break;
                    case '–ù–µ—Ç':
                        await Good.updateMany(
                            { 'sellerId': ctx.peerId, 'hasFitting': { "$in": ['‚úÖ', '‚ùå'] } }, 
                            { hasFitting: '‚ùå' }
                        )
                        ctx.send('‚ùå –ü—Ä–∏–º–µ—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤')
                        break;
                }             

                return ctx.scene.step.go(1)
            } catch (e) {
                console.log(e)
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }     
        },
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        async ctx => {
            try {
                if (ctx.scene.step.firstTime || !ctx.text)
                    return ctx.send({
                        message: '‚ùó –£–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n\n–ü—Ä–∏–º–µ—Ä:\n-2000 (–í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–Ω–∏–∑—è—Ç —Ü–µ–Ω—É –Ω–∞ 2000‚ÇΩ)\n20% (–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–≤—ã—Å—è—Ç —Ü–µ–Ω—É –Ω–∞ 20 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)',
                        keyboard: keyboard(previousMarkup),
                    })

                if (ctx.text == '–ù–∞–∑–∞–¥')
                    return ctx.scene.step.go(9)

                const patternPercent = /^-?\d+%$/
                const patternNumber = /^-?\d+$/

                if (patternNumber.test(ctx.text)) {
                    const price = +ctx.text

                    if (price > 1000000)
                        return ctx.send('‚ùó –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ - 1.000.000‚ÇΩ')

                    if (price < -1000000)
                        return ctx.send('‚ùó –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 1.000.000‚ÇΩ')

                    const goods = await Good.find({ sellerId: ctx.senderId })

                    for (const good of goods) {
                        let newPrice = good.price + price

                        if (newPrice >= 10_000_000)
                            newPrice = 10_000_000
                        
                        if (newPrice <= 0)
                            newPrice = 1

                        await Good.updateOne(
                            { _id: good._id },
                            { price: newPrice }
                        )
                    }

                    ctx.send('‚ùó –¶–µ–Ω—ã –Ω–∞ —Ç–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã')
                    return ctx.scene.step.go(1)
                } else if (patternPercent.test(ctx.text)) {
                    const percent = +ctx.text.replace('%', '')

                    if (percent > 100)
                        return ctx.send('‚ùó –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –Ω–∞—Ü–µ–Ω–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî 100%')
                    
                    if (percent < -75)
                        return ctx.send('‚ùó –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî -75%')

                        const goods = await Good.find({ sellerId: ctx.senderId })

                    for (const good of goods) {
                        let newPrice = Math.ceil(good.price + (good.price * (percent / 100)))

                        if (newPrice >= 10_000_000)
                            newPrice = 10_000_000
                        
                        if (newPrice <= 0)
                            newPrice = 1

                        await Good.updateOne(
                            { _id: good._id },
                            { price: newPrice }
                        )
                    }

                    ctx.send('‚ùó –¶–µ–Ω—ã –Ω–∞ —Ç–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã')
                    return ctx.scene.step.go(1)
                } else {
                    ctx.send({
                        message: '‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n\n–ü—Ä–∏–º–µ—Ä—ã: 20, -50, 100, 25.5',
                        keyboard: keyboard(previousMarkup)
                    })
                }
            } catch (e) {
                console.log(e)
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }     
        },
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
        async ctx => {
            try {
                await Good.updateMany({ sellerId: ctx.peerId}, { isHide: false, updatedAt: Date.now() })

                ctx.send('‚úÖ –¢–æ–≤–∞—Ä—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')

                return ctx.scene.step.go(1)
            } catch (e) {
                console.log(e)
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }
        },
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫
        async ctx => {
            try {
                const subsribes = await MailingUser.find({
                    userId: ctx.senderId,
                    type: "subscribeSearch"
                })


                if (subsribes.length == 0) {
                    ctx.send('‚ùó –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ç–æ–≤–∞—Ä –ø–æ —Å—Å—ã–ª–∫–µ')
                    return ctx.scene.step.go(1)
                }

                if (ctx.scene.step.firstTime || !ctx.text) {
                    ctx.send('üì© –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞. –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç —Ç–µ–±–µ –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ç–æ–≤–∞—Ä')

                    // –ü–æ–ª—É—á–∏—Ç—å –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                    let pages = formatSubcribesOnGoods(subsribes)
                    pages.forEach(async page => await ctx.send(page))

                    return ctx.send({
                        message: '‚ùó –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä (–æ–Ω —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—á–∞–ª–µ), —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä',
                        keyboard: keyboard(previousMarkup)
                    })
                }

                if (ctx.text == '–ù–∞–∑–∞–¥')
				    return ctx.scene.step.go(1)

                let selectedId = +ctx.text - 1
                let selectedSubcribe = subsribes[selectedId]


                if (selectedSubcribe) {
                    const goodName = selectedSubcribe.data.userQuery.goodName
                    await MailingUser.deleteOne({ _id: selectedSubcribe._id })

                    ctx.send(`‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä ${ goodName }`)
                    return ctx.scene.step.go(13)
                } else {
                    ctx.send({
                        message: '‚ùó –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏',
                        keyboard: keyboard(previousMarkup),
                    })
                }
            } catch (e) {
                console.log(e)
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }            
        },
        // –ß—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        async ctx => {
            try {
                if (ctx.scene.step.firstTime)
                    return ctx.send({
                        message: '‚ùó –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å',
                        keyboard: keyboard(previousMarkup)
                    })

                if (ctx.text == '–ù–∞–∑–∞–¥')
                    return ctx.scene.step.go(1)

                let queryId = ctx.hasForwards ? ctx.forwards[0].senderId : ctx.text

                const foundUser = await User.findOne({ userId: queryId }).lean()
                const extendedAccess = await findExtendedUser(queryId)
                const bannedUser = await BannedUser.findOne({ userId: queryId })
                const countGoods = await Good.countDocuments({ sellerId: queryId })

                if (foundUser) {
                    const dossierMessage = getUserDossierMessage({
                        ...foundUser,
                        extendedAccess,
                        countGoods,
                        bannedUser
                    })

                    ctx.send(dossierMessage)

                    // –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤
                    const searchedGoods = await Good.find({ sellerId: queryId })
                    if (searchedGoods.length) {
                        ctx.send(`‚ùó –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`)

                        let pages = getUserGoodsInPages(searchedGoods)
                        pages.forEach(async page => await ctx.send(page))    
                    }

                    return ctx.send({
                        message: '‚ùó –ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ —Ä–∞–∑ —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                        keyboard: keyboard(previousMarkup)
                    })
                } else {
                    return ctx.send({
                        message: '‚ùó –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                        keyboard: keyboard(previousMarkup),
                    })
                }
            } catch (e) {
                console.log(e)
                ctx.send('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
                return ctx.scene.leave()
            }
        }
	]),
]

export default profileScene
